---
title: "EDS 223: Week 3"
author: "Leilanie Rubinstein"
format: html
editor_options: 
  chunk_output_type: console
---

```{r}
library(sf)
library(tmap)
library(tidyverse)
library(spData)
```

## Spatial subsetting (filtering)

```{r}
nz <- spData::nz
nz_height <- spData::nz_height
canterbury <- nz %>%
  filter(Name == "Canterbury")

tm_shape(nz) +
  tm_polygons() +
  tm_shape(canterbury) +
  tm_fill(col = "darkgrey") +
  tm_shape(nz_height) +
  tm_dots(col = "red")

```

```{r}
# bracket subsetting
# x[row, column]
# this is more computationally efficent
c_height1 <- nz_height[canterbury, ]

# rows related to canterbury, all the columns (hence empty space), operation is disjoint
# nz_height(canterbury, ,op = st_disjoint())

# tidy version, using stfilter() to ubset
c_height2 <- nz_height %>%
  st_filter(y = canterbury,
            .predicate = st_intersects)

# sgbp = sparse binary predicate list
# creating logical vector based on st_intersects()
nz_height_sgbp <- st_intersects(x = nz_height, y = canterbury)
nz_height_logical <- lengths(nz_height_sgbp) > 0
c_height3 <- nz_height[nz_height_logical, ]
```

```{r}
# filter to all the ones within 1000km of Canterbury
nz_height_logical <- st_is_within_distance(
  nz_height, canterbury, 
  dist = units::set_units(1000, "km"),
  sparse = FALSE) # turns it into a logical
c_height4 <- nz_height[nz_height_logical, ]
```

## Spatial joins

```{r}
st_join(nz_height, nz, join = st_intersects) %>%
  # select cols to keep and rename t50_fid and Name cols
  select(id = t50_fid, elevation, region = Name) %>%
  # number of points for each region
  group_by(region) %>%
  summarise(n_points = n()) %>%
  # remove geometry col for nice output
  st_drop_geometry()

# to do an inner join, set `left = false` after the `join` argument
```

```{r}
cycle_hire <- spData::cycle_hire
cycle_hire_osm <- spData::cycle_hire_osm

tmap_mode("view")

tm_shape(cycle_hire) +
  tm_symbols(col = "red", 
             alpha = 0.2) +
  tm_shape(cycle_hire_osm) +
  tm_symbols(col = "blue", 
             alpha = 0.2)
```

```{r}
cycle_hire_join <- st_join(cycle_hire,
                           cycle_hire_osm,
                           st_is_within_distance,
                           dist = units::set_units(20, "m"))
```

```{r}
# check whether or not points overlap
if(nrow(cycle_hire) == nrow(cycle_hire_join)) {
  print("join matches original data dimensions")
} else {
  warning("join does not match original data dimensions")
}
```

# Geometry operations
## Aggregating

```{r}
us_states <- spData::us_states
regions <- us_states %>%
  group_by(REGION) %>%
  summarise(population = sum(total_pop_15, na.rm = TRUE))

tmap_mode("plot")

tm_shape(us_states) +
  tm_polygons()

tm_shape(regions) +
  tm_polygons()
```

```{r}
# setting conditional statement inside brackets for the rows
us_west <- us_states[us_states$REGION == "West", ]

# create a union of the geometries
us_west_union <- st_union(us_west)

texas <- us_states[us_states$NAME == "Texas", ]
texas_union <- st_union(us_west_union, texas)

tm_shape(texas_union) +
  tm_polygons()
```

## Buffering

```{r}
seine <- spData::seine
seine_buffer <- st_buffer(seine, dist = 5000)

tm_shape(seine_buffer) +
  tm_polygons() +
  tm_shape(seine) +
  tm_lines()


seine_buffer <- st_buffer(seine, dist = 50000)

# prevents overlap on the tributaries
seine_union <- st_union(seine_buffer)

tm_shape(seine_union) +
  tm_polygons() +
  tm_shape(seine) +
  tm_lines()
```

```{r}
nz_height_buffer <- st_buffer(nz_height, dist = 1000000)

# same as st_filter with st_is_within_distance
c_height5 <- nz_height_buffer %>%
  st_filter(y = canterbury,
            .predicate = st_intersects)

if (nrow(c_height4) == nrow(c_height5)) {
  print("results matched")
} else {
  warning("results do not match")
}
```

```{r}
# create a venn diagram - create two circles
x <- st_sfc(st_point(c(0,1))) %>%
  st_buffer(., dist = 1) %>%
  st_as_sf()

y <- st_sfc(st_point(c(1,1))) %>%
  st_buffer(., dist = 1) %>%
  st_as_sf()

intersection <- st_intersection(x, y)
difference_xy <- st_difference(x, y)
difference_yx <- st_difference(y, x)
sym_difference <- st_sym_difference(x, y)

bbox <- st_union(x, y)

tm_shape(x, bbox = bbox) +
  tm_borders(col = "red") +
  tm_shape(y) +
  tm_borders(col = "blue") +
  tm_shape(intersection) +
  tm_fill(col = "purple")
  
  tm_shape(intersection) +
  tm_fill(col = "purple")
  
  tm_shape(difference_xy) + 
  tm_fill(col = "purple")
  
  tm_shape(difference_yx) + 
  tm_fill(col = "purple")
  
  tm_shape(sym_difference) + 
  tm_fill(col = "purple")
```

```{r}
bb <- bbox
box <- st_as_sf(bb)
# create random points on surface
p <- st_sample(x = box, size = 100) %>%
  st_as_sf()

x_and_y <- st_intersection(x, y)
p_xy1 <- p[x_and_y, ]

p_xy2 <- p %>%
  st_filter(., x_and_y)

tm_shape(x, bbox = bbox) +
  tm_borders(col = "red") +
  tm_shape(y) +
  tm_borders(col = "blue") +
  tm_shape(p) +
  tm_dots()

tm_shape(x, bbox = bbox) +
  tm_borders(col = "red") +
  tm_shape(y) +
  tm_borders(col = "blue") +
  tm_shape(p_xy1) +
  tm_dots()

tm_shape(x, bbox = bbox) +
  tm_borders(col = "red") +
  tm_shape(y) +
  tm_borders(col = "blue") +
  tm_shape(p_xy2) +
  tm_dots()

```

## Centroids

```{r}
nz_centroid <- st_centroid(nz)
nz_pos <- st_point_on_surface(nz)

tm_shape(nz) +
  tm_polygons() +
  tm_shape(nz_centroid) +
  tm_symbols(col = "red", alpha = 0.5) +
  tm_shape(nz_pos) +
  tm_symbols(col = "blue", alpha = 0.5)
```

## Simplification

```{r}
seine_simple <- st_simplify(seine, dTolerance = 2000)

tm_shape(seine) +
  tm_lines()
# map looks more jagged because there are fewer points connected
# use the full dataset for analysis, but when you make your maps, simplification is helpful for plotting
```


